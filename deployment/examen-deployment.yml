############ DBSERVER
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:17.2-alpine3.21
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: distribuida
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /data/postgres

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: dbserver
  labels:
    app: postgres
spec:
  type: NodePort
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 30001
---
########### CONSUL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul
  labels:
    app: consul
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul
  template:
    metadata:
      name: consul
      labels:
        app: consul
    spec:
      containers:
        - name: consul
          image: consul:1.15.4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8500
              protocol: TCP
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: consul
  labels:
    app: consul
spec:
  selector:
    app: consul
  type: ClusterIP
  ports:
    - name: consul
      port: 8500
      protocol: TCP
---

########## AUTHORS
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-authors
  labels:
    app: app-authors
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-authors
  template:
    metadata:
      name: app-authors
      labels:
        app: app-authors
    spec:
      containers:
        - name: app-authors
          image: docker.io/aaguamaninga/app-authors-examen:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: JAKARTA_PERSISTENCE_JDBC_URL
              value: jdbc:postgresql://dbserver:5432/distribuida  # URL de la base de datos
            - name: JAKARTA_PERSISTENCE_JDBC_USER
              value: postgres
            - name: JAKARTA_PERSISTENCE_JDBC_PASSWORD
              value: postgres
            - name: HTTP_PORT
              value: "8080"
            - name: CONSUL_HOST
              value: "consul"
            - name: CONSUL_PORT
              value: "8500"
          livenessProbe:
            httpGet:
              path: /observe/health/live
              port: 8081
            initialDelaySeconds: 3
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /observe/health/ready
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: app-authors-service
  labels:
    app: app-authors
spec:
  type: NodePort
  selector:
    app: app-authors
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---

########## BOOKS
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-books
  labels:
    app: app-books
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-books
  template:
    metadata:
      name: app-books
      labels:
        app: app-books
    spec:
      containers:
        - name: app-books
          image: docker.io/aaguamaninga/app-books-examen:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              protocol: TCP
          #          resources:
          #            requests:
          #              cpu: "250m"
          #              memory: "64Mi"
          env:
            - name: QUARKUS_DATASOURCE_JDBC_URL
              value: jdbc:postgresql://dbserver:5432/distribuida
            - name: QUARKUS_DATASOURCE_USERNAME
              value: postgres
            - name: QUARKUS_DATASOURCE_PASSWORD
              value: postgres
            - name: QUARKUS_HTTP_PORT
              value: "8080"
            - name: CONSUL_HOST
              value: "consul"
            - name: CONSUL_PORT
              value: "8500"
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: app-books-service
  labels:
    app: app-books
spec:
  type: NodePort  #Al subir el yaml se pone << LoadBalancer >> para tener una ip REAL
  selector:
    app: app-books
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30002
---

############ APP-WEB
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  VUE_APP_API_HOST: "app-books-service"
  VUE_APP_API_PORT: "8080"
  VUE_APP_API_PATH: "books"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vue-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vue-app
  template:
    metadata:
      labels:
        app: vue-app
    spec:
      containers:
        - name: vue-app
          image: aaguamaninga/app-front-vue:latest
          ports:
            - containerPort: 80
          env:
            - name: VUE_APP_API_HOST
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: VUE_APP_API_HOST
            - name: VUE_APP_API_PORT
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: VUE_APP_API_PORT
            - name: VUE_APP_API_PATH
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: VUE_APP_API_PATH
---
apiVersion: v1
kind: Service
metadata:
  name: vue-app-service
spec:
  selector:
    app: vue-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
